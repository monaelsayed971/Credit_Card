# -*- coding: utf-8 -*-
"""credit.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tRYeiTTUxwVn002C_xP7afqGIsV_Bzby
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('data' , header = None)

df_clean=df.copy()

df_clean.head()

df_clean.columns=['Gender',
'Age',
'Debt',
'Married'	,
'BankCustomer',
'EducationLevel',
'Ethnicity',
'YearsEmployed',
'PriorDefault',
'Employed',
'CreditScore',
'DriversLicense',
'Citizen',
'ZipCode',
'Income',
'Approved']

df_clean.info()

df_clean.columns

cat_cols=df_clean.select_dtypes(include='O').columns.tolist()

cat_cols.remove('Approved')

cat_cols

for col in cat_cols:
        print(df_clean[col].value_counts())

df_clean[df_clean.Gender=='?']

df_clean[df_clean.EducationLevel=='?']

df_clean=df_clean[df_clean.Gender!='?']

df_clean=df_clean[df_clean.Age!='?']

df_clean['Age']

df_clean.describe()

df_clean.drop('ZipCode',inplace=True,axis=1)

df_clean.isna().sum()

num_cols=df_clean.select_dtypes(exclude='O').columns.tolist()

x=df_clean.drop('Approved',axis=1)
y=df_clean.Approved

df_clean.Approved=df_clean.Approved.map({'-':0,'+':1})

df_clean.head()

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

pip install category_encoders

cat_cols = ['Gender',
 'Married',
 'BankCustomer',
 'EducationLevel',
 'Ethnicity',
 'PriorDefault',
 'Employed',
 'DriversLicense',
 'Citizen']

from category_encoders import BinaryEncoder
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer

# Preprocessing for numerical data
numerical_transformer = Pipeline(steps=[
    ('imputer', SimpleImputer(strategy='median')),
    ('scaler', StandardScaler())])

# Preprocessing for categorical data
categorical_transformer = Pipeline(steps=[('binary', BinaryEncoder())])

# Bundle preprocessing for numerical and categorical data
preprocessor = ColumnTransformer(
    transformers=[
        ('num', numerical_transformer, num_cols),
        ('cat', categorical_transformer,cat_cols)])

X_train_preprocessed = preprocessor.fit_transform(X_train)
X_test_preprocessed = preprocessor.transform(X_test)

df_clean.columns

from sklearn.linear_model import LogisticRegression
model_1 = LogisticRegression(solver='liblinear', random_state=1)
model_1.fit(X_train_preprocessed, y_train)

print('LogisticRegression Training Accuracy: ', round(model_1.score(X_train_preprocessed, y_train), 2))

